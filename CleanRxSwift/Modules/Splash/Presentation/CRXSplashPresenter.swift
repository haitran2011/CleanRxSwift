//
//  CRXSplashPresenter.swift
//  CleanRxSwift
//
//  Created by Pedro Brito on 22/06/16.
//  Copyright (c) 2016 pedroml.brito. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import RxSwift
import QuickShotUtils;

protocol CRXSplashPresenterProtocol: CRXPresenterProtocol {
}

class CRXSplashPresenter: CRXSplashPresenterProtocol {
  var view: CRXSplashViewController!
 
  weak var interactor: CRXSplashInteractor!
  
  var disposeBag = DisposeBag()
  var subscription: Disposable!
  
  init(interactor: CRXSplashInteractor) {
    self.interactor = interactor
    
    subscription = self.interactor.updateUserIsDone().observeOn(MainScheduler.instance).subscribe(onNext: { (result) in
        self.processOnBoardingState(result)
    }, onError: { (error) in
        // TODO: log error
    }, onCompleted: { 
        // ended
    }, onDisposed: { 
        // disposed instance
    })
    
    disposeBag.insert(subscription)
  }

  
  // MARK: Presentation logic
  func presentNextScreen(_ response: CRXSplashResponse) {
    // NOTE: Format the response from the Interactor and pass the result back to the View Controller
    self.view.finishSplashPage(viewModel: CRXSplashViewModel(destination: response.destination, transitionType: response.transitionType))
  }

  
  func bindView(view: CRXViewProtocol) {
    self.view = view as! CRXSplashViewController
  }

  func processOnBoardingState(_ isDone: Bool) {
    var response = CRXSplashResponse();
    response.destination = isDone == true ? CRXSplashDestination.InApp : CRXSplashDestination.OnBoarding
    response.transitionType = ViewControllerPresentationType.ReplaceAtRoot
    
    self.presentNextScreen(response)
  }
  
}
