//
//  CRXSplashPresenter.swift
//  CleanRxSwift
//
//  Created by Pedro Brito on 22/06/16.
//  Copyright (c) 2016 pedroml.brito. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import RxSwift
import QuickShotUtils;

protocol CRXSplashPresenterInput
{
}

protocol CRXSplashPresenterOutput: class
{
  func finishSplashPage(viewModel: CRXSplashViewModel)
}

class CRXSplashPresenter: CRXSplashPresenterInput
{
  weak var output: CRXSplashPresenterOutput!
 
  weak var interactor: CRXSplashInteractor!;
  
  var disposeBag = DisposeBag()
  var subscription: Disposable!
  
  init(interactor: CRXSplashInteractor){
    self.interactor = interactor
    subscription = self.interactor.updateUserIsDone().observeOn(MainScheduler.instance).subscribeNext({ (result) in
      self.processOnBoardingState(result);
    })
    disposeBag.addDisposable(subscription);
  }

  
  // MARK: Presentation logic
  func presentSomething(response: CRXSplashResponse)
  {
    // NOTE: Format the response from the Interactor and pass the result back to the View Controller
    output.finishSplashPage(CRXSplashViewModel(destination: response.destination, transitionType: response.transitionType));
  }


  func processOnBoardingState(isDone: Bool){
    var response = CRXSplashResponse();
    response.destination = isDone == true ? CRXSplashDestination.InApp : CRXSplashDestination.OnBoarding;
    response.transitionType = ViewControllerPresentationType.ReplaceAtRoot;
    
    self.presentSomething(response);
  }
}
